2*0.3*sqrt(2-2*0.7)
(2*0.3*sqrt(2-2*0.7))^2
x_1 = -1
x_2 = 1
p_1 = 0.5
p_2 = 0.5
mu_X    = x_1   * p_1 + x_2   * p_2
sigma_X = x_1^2 * p_1 + x_2^2 * p_2
n_1 = 62984825
n_2 = 65853516
mu_R    = \left( n_1 + n_2 \right) mu_X
sigma_R = sigma_X * sqrt(n_1 + n_2)
r = n_1 * x_1 + n_2 * x_2
2 * sigma_R
x_1 = -1
x_2 = 1
p_1 = 0.5
p_2 = 0.5
mu_X    = x_1   * p_1 + x_2   * p_2
sigma_X = x_1^2 * p_1 + x_2^2 * p_2
n_1 = 62984825
n_2 = 65853516
mu_R    = \left( n_1 + n_2 \right) mu_X
sigma_R = sigma_X * sqrt(n_1 + n_2)
r = n_1 * x_1 + n_2 * x_2
2 * sigma_R
13000+5705.33+4466.4
28577-(13000+5705.33+4466.4)
13000+5705.33
25000*300
15000000+3875200+19200000
15000000+3875200+19200000+800000
60000000-(15000000+3875200+19200000+800000)
mean(124.3, 124.2, 124.4)
sd(124.3, 124.2, 124.4)
mean(c(124.3, 124.2, 124.4))
sd(c(124.3, 124.2, 124.4))
sqrt(sd(c(124.3, 124.2, 124.4)))
sd(c(124.3, 124.2, 124.4))/sqrt(3)
mean(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
(mean(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))-40)*60
sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))*60
sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))*60/sqrt(3)
sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))*60/sqrt(5)
Lmean  = mean(c(124.3, 124.2, 124.4))
Lsigma = sd(c(124.3, 124.2, 124.4))
Lerror = Lsigma / sqrt(3)
Beta_mean  = mean(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
Beta_sigma = sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
Beta_error = Beta_sigma / sqrt(5)
h = 3 # ft
H = Lmean * tan (Beta_mean * pi / 180.0) + h
H
h_error = 0.1
Hsigma = sqrt( Herror^2 * (tan (Beta_mean * pi / 180.0))^2 + (Beta_error / 60 * pi / 180.0)^2 * H^2 / ((cos (Beta_mean * pi / 180.0))^2) +  h_error^2)
Lmean  = mean(c(124.3, 124.2, 124.4))
Lsigma = sd(c(124.3, 124.2, 124.4))
Lerror = Lsigma / sqrt(3)
Beta_mean  = mean(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
Beta_sigma = sd(c(40+24.6/60, 40+25/60, 40+25.5/60, 40+24.7/60,40+25.2/60))
Beta_error = Beta_sigma / sqrt(5)
h = 3 # ft
H = Lmean * tan (Beta_mean * pi / 180.0) + h
h_error = 0.1
Hsigma = sqrt( Lerror^2 * (tan (Beta_mean * pi / 180.0))^2 + (Beta_error / 60 * pi / 180.0)^2 * H^2 / ((cos (Beta_mean * pi / 180.0))^2) +  h_error^2)
qnorm(0.001)
qnorm(0.025)
qnorm(0.05)
qnorm(0.1)
qnorm(0.01)
qt(0.01,3)
qt(0.01,4)
qt(0.01,5)
qt(0.02,3)
qt(0.025,3)
qt(0.025,4)
qt(0.025,5)
qt(0.05,3)
qt(0.05,4)
qt(0.05,5)
qt(0.1,3)
qt(0.1,4)
qt(0.1,5)
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * X_std, X_mean + qt (1 - alpha/2,n - 1) * X_std)
X_bounds
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * X_std, X_mean + qt (1 - alpha/2,n - 1) * X_std)
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * X_std, X_mean + qt (1 - alpha/2,n - 1) * X_std)
X_bounds
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
3672-2.132*172
X_bounds
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - pnorm (300/S_x))
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - qt (300/S_x,n - 1))
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - pt (300/S_x,n - 1))
pt (300/S_x,n - 1)
300/S_x
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - pt (300/S_x,n - 1))
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - pt (300/S_x,n - 1))
alpha_conf
1 - alpha_conf
qnorm(0.02)
qt(0.02,3)
qt(0.02,4)
qt(0.02,5)
confidence = 0.90
alpha = 1 - confidence
X_vector = c (4142, 3405, 3402, 4039, 3372)
n = length(X_vector)
X_mean = mean (X_vector)
X_std  = sd   (X_vector)
S_x    = X_std  / sqrt(n)
X_bounds = c(X_mean + qt (alpha/2,n - 1) * S_x, X_mean + qt (1 - alpha/2,n - 1) * S_x)
epsilon = 300
alpha_conf = 2 * ( 1 - pt (300/S_x,n - 1))
alpha_lower = 0.02
mu_lower = X_mean + qt(alpha_lower,n - 1) * S_x
source('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/E1A04500-963D-4AF9-AE54-99DCA5B2D378/Draft_InLabExam.R')
vector = c( 1.50, 2.80, 2.50, 3.20, 1,90, 4.10, 3.60, 2.60, 2.90, 2,30 )
n = length (vector)
alpha = sqrt(2 * sum(vector^2) / n)
sum(vector^2)
vector^2
vector = c( 1.50, 2.80, 2.50, 3.20, 1.90, 4.10, 3.60, 2.60, 2.90, 2,30 )
n = length (vector)
alpha = sqrt(2 * sum(vector^2) / n)
vector^2
vector = c( 1.50, 2.80, 2.50, 3.20, 1.90, 4.10, 3.60, 2.60, 2.90, 2.30 )
n = length (vector)
alpha = sqrt(2 * sum(vector^2) / n)
vector^2
alpha
ector = c(1.8, 2.0, 2.1, 1.7, 1.2, 2.3, 2.5, 2.9, 1.9, 2.2)
n = length (vector)
C_mean  = mean (vector)
C_std   =   sd (vector)
C_error = C_std / sqrt(n)
vector = c(1.8, 2.0, 2.1, 1.7, 1.2, 2.3, 2.5, 2.9, 1.9, 2.2)
n = length (vector)
C_mean  = mean (vector)
C_std   =   sd (vector)
C_error = C_std / sqrt(n)
C_mean
C_std
C_error
qt(0.01,8)
qt(0.01,9)
qt(0.01,10)
qt(0.02,8)
qt(0.02,9)
qt(0.02,10)
qt(0.025,8)
qt(0.025,9)
qt(0.025,10)
qt(0.05,8)
qt(0.05,9)
qt(0.05,10)
qt(0.1,8)
qt(0.1,9)
qt(0.1,10)
vector = c(1.8, 2.0, 2.1, 1.7, 1.2, 2.3, 2.5, 2.9, 1.9, 2.2)
n = length (vector)
C_mean  = mean (vector)
C_std   =   sd (vector)
C_error = C_std / sqrt(n)
alpha = 0.05
C_lbound = C_mean + qt(alpha,n - 1) * C_error
C_lbound
vector = c(1.8, 2.0, 2.1, 1.7, 1.2, 2.3, 2.5, 2.9, 1.9, 2.2)
n = length (vector)
C_mean  = mean (vector)
C_std   =   sd (vector)
C_error = C_std / sqrt(n)
alpha = 0.05
C_lbound = C_mean + qt(alpha,n - 1) * C_error
C_bounds = c(C_mean + qt(alpha  / 2,n - 1) * C_error, C_mean + qt(1 - alpha  / 2,n - 1) * C_error)
C_bounds
qnorm(0.005)
qt(0.005,3)
qt(0.005,4)
qt(0.005,5)
qnorm(0.01)
qt(0.01,3)
qt(0.01,4)
qt(0.01,5)
Ro_vector = c(2.5, 2.4, 2.6, 2.6, 2.4)
Ri_vector = c(1.6, 1.5, 1.6, 1.4, 1.4)
Ro_mean = mean (Ro_vector)
Ri_mean = mean (R1_vector)
Ro_std  = sd   (Ro_vector)
Ri_std  = sd   (Ri_vector)
Ro_error = Ro_std / sqrt(length(Ro_vector))
Ri_error = Ri_std / sqrt(length(Ri_vector))
Ro_vector = c(2.5, 2.4, 2.6, 2.6, 2.4)
Ri_vector = c(1.6, 1.5, 1.6, 1.4, 1.4)
Ro_mean = mean (Ro_vector)
Ri_mean = mean (Ri_vector)
Ro_std  = sd   (Ro_vector)
Ri_std  = sd   (Ri_vector)
Ro_error = Ro_std / sqrt(length(Ro_vector))
Ri_error = Ri_std / sqrt(length(Ri_vector))
Ro_std
Ro_vector = c(2.5, 2.4, 2.6, 2.6, 2.4)
Ri_vector = c(1.6, 1.5, 1.6, 1.4, 1.4)
Ro_mean = mean (Ro_vector)
Ri_mean = mean (Ri_vector)
Ro_std  = sd   (Ro_vector)
Ri_std  = sd   (Ri_vector)
Ro_error = Ro_std / sqrt(length(Ro_vector))
Ri_error = Ri_std / sqrt(length(Ri_vector))
A_mean   = (Ro_mean^2 - Ri_mean^2) * pi
Ro_vector = c(2.5, 2.4, 2.6, 2.6, 2.4)
Ri_vector = c(1.6, 1.5, 1.6, 1.4, 1.4)
Ro_mean = mean (Ro_vector)
Ri_mean = mean (Ri_vector)
Ro_std  = sd   (Ro_vector)
Ri_std  = sd   (Ri_vector)
Ro_error = Ro_std / sqrt(length(Ro_vector))
Ri_error = Ri_std / sqrt(length(Ri_vector))
A_mean   = (Ro_mean^2 - Ri_mean^2) * pi
A_error  = sqrt( Ro_error^2 * (2 * pi * Ro_mean)^2 + Ri_error^2 * (2 * pi * Ri_mean)^2)
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
b1_mean
b1_std
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b1_error    = b1_std / sqrt(legth(b1_vector))
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
b2_error    = b2_std / sqrt(legth(b2_vector))
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
beta_error  = beta_std / sqrt(legth(beta_vector))
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b1_error    = b1_std / sqrt(length(b1_vector))
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
b2_error    = b2_std / sqrt(length(b2_vector))
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
beta_error  = beta_std / sqrt(length(beta_vector))
b1_error
b2_mean
b2_std
b2_error
beta_mean
(beta_mean+59)*60
(beta_mean-59)*60
beta_std
beta_std*60
beta_error*60
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b1_error    = b1_std / sqrt(length(b1_vector))
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
b2_error    = b2_std / sqrt(length(b2_vector))
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
beta_error  = beta_std / sqrt(length(beta_vector))
A_mean      = b1_mean * b2_mean * sin ( beta_mean * pi / 180.0 ) - b2_mean * b2_mean * sin ( beta_mean * pi / 180.0 ) * cos ( beta_mean * pi / 180.0 )
A_mean
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b1_error    = b1_std / sqrt(length(b1_vector))
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
b2_error    = b2_std / sqrt(length(b2_vector))
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
beta_error  = beta_std / sqrt(length(beta_vector))
A_mean      = b1_mean * b2_mean * sin ( beta_mean * pi / 180.0 )
A_mean
b1_vector   = c( 120.4, 119.8, 120.2, 120.3, 119.6, 120.1, 119.7, 119.4)
b2_vector   = c(  89.8,  89.6,  90.4,  90.2,  89.5)
beta_vector = c( 60.0 + 20.0/60.0, 60.0 + 10.0/60.0, 59.0 + 45.0/60.0,
59.0 + 35.0/60.0, 60.0 +  5.0/60.0, 59.0 + 45.0/60.0)
b1_mean     = mean (b1_vector)
b1_std      = sd   (b1_vector)
b1_error    = b1_std / sqrt(length(b1_vector))
b2_mean     = mean (b2_vector)
b2_std      = sd   (b2_vector)
b2_error    = b2_std / sqrt(length(b2_vector))
beta_mean   = mean (beta_vector)
beta_std    = sd   (beta_vector)
beta_error  = beta_std / sqrt(length(beta_vector))
A_mean      = 0.5 * b1_mean * b2_mean * sin ( beta_mean * pi / 180.0 )
A_mean
MPG_vector = c(35, 40, 37, 42, 32, 43, 38, 32, 41, 34)
MPG_mean   = mean (MPG_vector)
MPG_std    = sd   (MPG_vector)
MPG_vector = c(35, 40, 37, 42, 32, 43, 38, 32, 41, 34)
MPG_mean   = mean (MPG_vector)
MPG_std    = sd   (MPG_vector)
420*80
1282/87.48
1200000000000/21000000
1.55*10^12/(21*10^6)
150000000/(100*15000)
150000000/100*15000
16600*4.33
4.33*17170
3/79
9223.2+2403.96+597.99
10000-149+2452.13
1155-861
0.40468564*3.2808399
0.40468564*3.2808399/2
0.40468564*0.3048
0.40468564*0.3048*5
40467*0.3048
40467*0.3048*5
40467*0.3048*3
40467*0.3048*2
40467*0.3048*2.5
40467*0.3048*1.5
100/6
830/780
830/780*45255
10000/(7*24)
1860/780
2.5*830/780
50*2.5*830/780
15000*70/65
65*19000/15000
4*19000
4.33*19000
70000/4.33
4.33*16469
65000-22000
65000-22000+20000
9969.98/0.59431706
4006.84/0.23878118
(9969.98+4006.84+200.1.51+1.62)/0.8451
(9969.98+4006.84+201.51+1.62)/0.8451
9353.2/34.02460944
(9969.98+4006.84+201.51+1.62)
install.packages("RPostgreSQL")
library("RPostgreSQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
source('~/COMPASStest.R')
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
source('~/COMPASStest.R')
100/13
100/13*6452
12000/(365*24)
77993/(365*24)
12/(365*24)
12000/(365*24)
12*1000/(365*24)
77993*1000/(365*24)
274868*1000/(365*24)
274868*1000/(365*24)/79708
1.1^2
1.1^3
1.1^4
1.1^5
1.1^6
9100/7288
155/130
940000/(365*24)
26652/(365*24)
190*400000
190*400000/1000000
32000/(365*24)
32000/24
52000/24
32000/365
52000/365
433000/365
344000/365
492000/(365*24)
344000/(365*24)
32000/365
52000/365
92000/365
164000/365
344000/365
492000/365
492/24
344/24
492/24
164/24
92/24
52/24
32/24
492/24
490/24
492/24
107/4400
3/76
910/0.11
910*0.11
940000/(365*24)
910*0.114
910*0.1141
940*0.1141
source('~/Desktop/COMPASStest.R')
8*72
32*5
source('~/Desktop/COMPASStest.R')
dbDisconnect(con)
dbUnloadDriver(drv)
source('~/Desktop/COMPASStest.R')
source('~/Desktop/Analysis/Rscripts/COMPASS_Graphics.R')
